/*
 *  watch_diff_400sps_sync.ino (MODIFIED FOR 400Hz)
 *  ---------------------------------------------------------------
 *  • FDC1004 continuous differential (CH0 – CH3) @ 400 Hz
 *  • Every 2.5 ms (task polls at 2ms) read latest value, send "C±ddddddT########\n"
 *  • 4-byte sync packets from master keep time aligned
 *  • Wi-Fi fixed on channel 6  (matches ReceiverSync.ino)
 *  • Builds with ESP32-Arduino ≥ 3.2.0  on ESP32-S3
 */

#include <Arduino.h>
#include <Wire.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <esp_now.h>
#include <Protocentral_FDC1004.h> // Make sure this library is correctly installed
#include "pin_config.h" // Ensure this file exists and is correctly configured for your S3 board

/* ──────────  master MAC address  ────────── */
static constexpr uint8_t MAC_RX[6] = { 0x80,0x7D,0x3A,0xF3,0xBF,0x4C }; // REPLACE with your Receiver's MAC

/* ──────────  FDC1004 registers  ────────── */
constexpr uint8_t MEAS_CONF0 = 0x08;
constexpr uint8_t MEAS0_MSB  = 0x00;
// Assuming FDC_REGISTER is defined in Protocentral_FDC1004.h, typically 0x0C
// If not, you might need: constexpr uint8_t FDC_REGISTER = 0x0C;

/* ──────────  time-sync state  ────────── */
static volatile uint32_t master_epoch_ms  = 0;
static volatile uint32_t epoch_ref_millis = 0;
static volatile bool     clock_locked     = false;

/* ──────────  FreeRTOS queues  ────────── */
struct SyncMsg { uint32_t ts; };
static QueueHandle_t syncQ;          // 8 entries
static QueueHandle_t txQ;            // 32 entries

/* ──────────  I²C helpers  ────────── */
inline void write16(uint8_t reg, uint16_t val)
{
    Wire.beginTransmission(0x50); // FDC1004 I2C Address
    Wire.write(reg);
    Wire.write(uint8_t(val >> 8));
    Wire.write(uint8_t(val));
    Wire.endTransmission();
}
inline uint16_t read16(uint8_t reg)
{
    Wire.beginTransmission(0x50); // FDC1004 I2C Address
    Wire.write(reg);
    Wire.endTransmission(false); // Send repeated start
    Wire.requestFrom(0x50, uint8_t(2));
    if (Wire.available() >= 2) {
        return (uint16_t(Wire.read()) << 8) | Wire.read();
    }
    return 0; // Error or no data
}

/* ──────────  ESP-NOW receive ISR  ────────── */
void onRecv(const esp_now_recv_info_t* recv_info, const uint8_t* data, int len) // Corrected signature
{
    if (len != sizeof(uint32_t)) return; // Check for 4 bytes specifically
    SyncMsg m;
    memcpy(&m.ts, data, sizeof(uint32_t));
    xQueueSendFromISR(syncQ, &m, nullptr);
}

/* ──────────  400 Hz sampler (task polls at 500Hz)  ────────── */
void sampleTask(void*)
{
    const TickType_t period = pdMS_TO_TICKS(2);      // 2 ms = 500 Hz task poll rate (for 400Hz FDC)
    TickType_t next = xTaskGetTickCount();
    char line[32];

    for (;;)
    {
        // Trigger measurement if FDC1004 is not in continuous mode, or ensure it is
        // For continuous mode, this read should get the latest completed conversion
        int16_t raw = int16_t(read16(MEAS0_MSB));
        int32_t fF  = int32_t(raw) * 457L / 1000L;     // 457 aF/LSB → fF (use long for intermediate product)

        uint32_t ts = 0; // Default to 0 if clock not locked
        if (clock_locked) {
            // Ensure no overflow with millis() - epoch_ref_millis
            uint32_t current_millis = millis();
            uint32_t delta_millis = (current_millis >= epoch_ref_millis) ? 
                                    (current_millis - epoch_ref_millis) : 
                                    (UINT32_MAX - epoch_ref_millis + current_millis + 1);
            ts = master_epoch_ms + delta_millis;
        }

        snprintf(line, sizeof(line),
                 "C%+07ldT%08lu\n", // Changed %+06ld to %+07ld to accommodate potentially larger fF values
                 static_cast<long>(fF),
                 static_cast<unsigned long>(ts));

        xQueueSend(txQ, line, 0);                   // non-blocking, drop if full
        vTaskDelayUntil(&next, period);
    }
}

/* ──────────  sender  ────────── */
void sendTask(void*)
{
    char line[32];
    for (;;)
        if (xQueueReceive(txQ, &line, portMAX_DELAY) == pdPASS)
            esp_now_send(MAC_RX,
                         reinterpret_cast<uint8_t*>(line),
                         strlen(line)); // Only send actual length
}

/* ──────────  sync handler  ────────── */
void syncTask(void*)
{
    SyncMsg m;
    for (;;)
    {
        if (xQueueReceive(syncQ, &m, portMAX_DELAY) == pdPASS) {
            if (m.ts == 0) // Reset packet
            {
                clock_locked = false;
                master_epoch_ms  = 0;
                epoch_ref_millis = millis(); // Reference point for local time if clock gets locked later
                Serial.println("Sync: Clock reset by master.");
            }
            else // Sync packet
            {
                master_epoch_ms  = m.ts;
                epoch_ref_millis = millis(); // Capture local time at the moment of sync
                if (!clock_locked) {
                    Serial.println("Sync: Clock locked to master.");
                }
                clock_locked     = true;
            }
        }
    }
}

/* ──────────  radio + ESP-NOW  ────────── */
void radioInit()
{
    WiFi.mode(WIFI_STA);
    delay(100); // Small delay after mode set
    esp_err_t channel_set_result = esp_wifi_set_channel(6, WIFI_SECOND_CHAN_NONE);     // channel 6
    if (channel_set_result != ESP_OK) {
        Serial.printf("Error setting WiFi channel: %s\n", esp_err_to_name(channel_set_result));
    } else {
        Serial.println("WiFi channel set to 6.");
    }
    WiFi.disconnect(true, true); // Disconnect from any previous AP
    Serial.printf("Watch MAC: %s\n", WiFi.macAddress().c_str());
}
void espNowInit()
{
    if (esp_now_init() != ESP_OK) {
        Serial.println("ESP-NOW init fail. Restarting...");
        delay(1000);
        ESP.restart();
    }
    Serial.println("ESP-NOW Initialized.");

    esp_now_peer_info_t peer{};
    memcpy(peer.peer_addr, MAC_RX, 6);
    peer.channel = 6;  // Ensure this matches the channel set in radioInit
    peer.encrypt = false;
    peer.ifidx = WIFI_IF_STA; // Specify interface

    if (esp_now_add_peer(&peer) != ESP_OK) {
        Serial.println("Failed to add peer (Receiver).");
        return;
    }
    Serial.println("Receiver Peer Added.");

    esp_now_register_recv_cb(onRecv);
}

/* ──────────  FDC1004 continuous diff @ 400 Hz  ────────── */
void fdcInit()
{
    // Ensure IIC_SDA and IIC_SCL are defined in pin_config.h
    #ifndef IIC_SDA
        #define IIC_SDA 8 // Example for S3, replace with your actual pins
    #endif
    #ifndef IIC_SCL
        #define IIC_SCL 9 // Example for S3, replace with your actual pins
    #endif

    Wire.begin(IIC_SDA, IIC_SCL, 400000UL); // SCL, SDA, Clock Speed
    Serial.println("Wire (I2C) Initialized.");

    // Verify FDC1004 is present
    Wire.beginTransmission(0x50);
    if (Wire.endTransmission() != 0) {
        Serial.println("FDC1004 not found on I2C bus! Halting.");
        while(1) delay(1000);
    }
    Serial.println("FDC1004 Found.");


    /* slot-0: CH0(+) – CH3(–) (Differential measurement between CIN1 and CIN4) */
    // CHA = CIN1 (0b000), CHB = CIN4 (0b011) -> (000 << 13) | (011 << 10)
    // CAPDAC an be left at 0 for no offset.
    uint16_t meas_config_0_value = (0b000 << 13) | (0b011 << 10); // MEAS_CH0 = CIN1, MEAS_CH3 = CIN4
    write16(MEAS_CONF0, meas_config_0_value); // Configure Measurement 0

    /* continuous @ 400 Hz, REPEAT = 1 (for continuous), MEAS1 = slot-0 */
    // FDC_REGISTER is usually 0x0C for the FDC control register.
    // Ensure Protocentral_FDC1004.h defines FDC_REGISTER or define it here.
    // The FDC1004_XXXHZ constants are typically: 100Hz=0x01, 200Hz=0x02, 400Hz=0x03 for RATE bits
    #ifndef FDC_REGISTER
        #define FDC_REGISTER 0x0C
    #endif
    #ifndef FDC1004_400HZ // Define if not in library
        #define FDC1004_400HZ 0x03
    #endif

    // Bit fields for FDC_REGISTER (0x0C):
    // REPEAT (bit 8): 1 for continuous
    // MEAS_X_EN (bits 7-4): Enable corresponding measurements. We use MEAS0.
    // RATE (bits 11-10): Sample rate. 0b11 for 400Hz.
    // Reserved bits should be 0.
    // For a single continuous measurement (MEAS0) at 400Hz:
    // RATE = 0b11 (400Hz) -> (FDC1004_400HZ << 10)
    // REPEAT = 1 -> (1 << 8)
    // MEAS_0_EN = 1 -> (1 << 7) (assuming MEAS0 maps to bit 7 in your setup.
    // The library might use slightly different bit mapping or a helper function.
    // The original `(1 << 7)` likely implies triggering measurement 0 (MEAS_0).
    // Let's stick to the structure you had, assuming it's correct for the library.
    uint16_t start_measurement_cmd = (FDC1004_400HZ << 10) | (1 << 8) | (1 << 7); // REPEAT=1, Trigger MEAS0
    write16(FDC_REGISTER, start_measurement_cmd);
    Serial.println("FDC1004 configured for continuous 400Hz differential measurement.");
}

/* ──────────  Arduino life-cycle  ────────── */
void setup()
{
    Serial.begin(115200);
    delay(1000); // Wait for serial to initialize
    Serial.println("\n--- Watch S3: FDC1004 Differential @ 400Hz ---");

    radioInit();
    espNowInit();
    fdcInit();

    syncQ = xQueueCreate(8,  sizeof(SyncMsg));
    if (!syncQ) Serial.println("Failed to create syncQ");
    txQ   = xQueueCreate(32, sizeof(char[32])); // Store up to 32 readings
    if (!txQ) Serial.println("Failed to create txQ");


    // Core 1 for sampling and sync (potentially I2C intensive)
    // Core 0 for sending (network intensive)
    xTaskCreatePinnedToCore(sampleTask, "sample", 3072, nullptr, 3, nullptr, 1); // Increased stack for snprintf
    xTaskCreatePinnedToCore(sendTask,   "send",   3072, nullptr, 2, nullptr, 0);
    xTaskCreatePinnedToCore(syncTask,   "sync",   2048, nullptr, 2, nullptr, 1);

    Serial.println("Watch: 400 Hz streaming, waiting for sync.");
    Serial.println("--------------------------------------------");
}

void loop() {
    vTaskDelay(pdMS_TO_TICKS(1000)); // Keep main loop alive, tasks do the work
    // You could print FreeRTOS stats here for debugging if needed
    // e.g., UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL); // For current task
    // Serial.printf("Loop stack HWM: %u\n", uxHighWaterMark);
}